from flask import Flask, request
import requests
import os
import openai
import json
import csv
import urllib.request
from datetime import datetime

app = Flask(__name__)

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
openai.api_key = os.environ.get("OPENAI_API_KEY")

# === –ü–∞–º—è—Ç—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
user_state = {}

# === ID –∏ GID –≤–∫–ª–∞–¥–æ–∫ Google Sheets ===
GOOGLE_SHEET_ID = "1p4rAh1zPKF-BHeLOXBqvUk7zSKb-ayz8BAtvzF9n1aQ"
SHEET_GIDS = {
    "–¢—Ä–µ–Ω–¥–æ–≤–∞—è": "0",
    "–ö–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥–æ–≤–∞—è": "1407798106",
    "–î–∏–∞–ø–∞–∑–æ–Ω–Ω–∞—è": "393811242",
    "Hotei": "879338379",
    "–ê–Ω–∞–ª–∏–∑ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é": "1281083042"
}

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ GID –≤–∫–ª–∞–¥–∫–∏ ===
def load_strategies_by_gid(gid):
    try:
        url = f"https://docs.google.com/spreadsheets/d/{GOOGLE_SHEET_ID}/export?format=csv&gid={gid}"
        with urllib.request.urlopen(url) as response:
            lines = [l.decode('utf-8') for l in response.readlines()]
            reader = csv.DictReader(lines)
            return {row['–ù–∞–∑–≤–∞–Ω–∏–µ']: row['–û–ø–∏—Å–∞–Ω–∏–µ'] for row in reader if row.get('–ù–∞–∑–≤–∞–Ω–∏–µ') and row.get('–û–ø–∏—Å–∞–Ω–∏–µ')}
    except Exception as e:
        return {}

STRATEGIES = {}

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –∫–Ω–æ–ø–∫–∞–º–∏ ===
def send_telegram_message(message, chat_id, reply_markup=None):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML"
    }
    if reply_markup:
        data["reply_markup"] = reply_markup
    requests.post(url, json=data)

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ ===
def get_active_sessions():
    now = datetime.utcnow().hour
    sessions = []
    if 0 <= now < 9:
        sessions.append("–ê–∑–∏–∞—Ç—Å–∫–∞—è")
    if 7 <= now < 17:
        sessions.append("–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è")
    if 13 <= now < 22:
        sessions.append("–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è")
    return sessions

# === Webhook Telegram ===
@app.route('/telegram', methods=['POST'])
def telegram_webhook():
    data = request.json

    if 'message' in data:
        chat_id = data['message']['chat']['id']
        text = data['message'].get('text', '')

        state = user_state.setdefault(chat_id, {})

        if text == "/start":
            send_telegram_message("–ü—Ä–∏–≤–µ—Ç! –Ø Hotei-bot-–ê–Ω–∞–ª–∏—Ç–∏–∫. –í—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ ‚Äî —è –æ—Ç–≤–µ—á–∞—é. –ñ–º–∏ –Ω–∞ /start", chat_id)
            show_main_menu(chat_id)

        elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            show_settings_menu(chat_id)

        elif text == "–í—ã–±–æ—Ä –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã":
            show_symbol_menu(chat_id)

        elif text == "–í—ã–±–æ—Ä —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞":
            show_timeframe_menu(chat_id)

        elif text == "–í—ã–±–æ—Ä —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏":
            show_expiration_menu(chat_id)

        elif text == "–í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏":
            show_strategy_category_menu(chat_id)

        elif text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
            show_main_menu(chat_id)

        elif text in SYMBOL_LIST:
            state['symbol'] = text
            send_telegram_message(f"‚úÖ –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –≤—ã–±—Ä–∞–Ω–∞: {text}", chat_id)
            show_main_menu(chat_id)

        elif text in ["M1", "M5", "M15"]:
            state['timeframe'] = text
            send_telegram_message(f"‚úÖ –¢–∞–π–º—Ñ—Ä–µ–π–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {text}", chat_id)
            show_settings_menu(chat_id)

        elif text in ["3–º–∏–Ω", "5–º–∏–Ω", "7–º–∏–Ω"]:
            state['expiration'] = text
            send_telegram_message(f"‚úÖ –≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {text}", chat_id)
            show_settings_menu(chat_id)

        elif text in SHEET_GIDS:
            state['strategy_category'] = text
            global STRATEGIES
            STRATEGIES = load_strategies_by_gid(SHEET_GIDS[text])
            if STRATEGIES:
                show_strategy_keyboard(chat_id)
            else:
                send_telegram_message("‚ö†Ô∏è –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é.", chat_id)

        elif text in list(STRATEGIES.keys()):
            state['strategy'] = text
            send_telegram_message(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {text}", chat_id)
            show_settings_menu(chat_id)

        elif text == "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑":
            summary = f"<b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n\nüìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {state.get('strategy', '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞')}\nüïê –¢–∞–π–º—Ñ—Ä–µ–π–º: {state.get('timeframe', '–Ω–µ –≤—ã–±—Ä–∞–Ω')}\n‚è≥ –≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è: {state.get('expiration', '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞')}\nüí± –í–∞–ª—é—Ç–∞: {state.get('symbol', '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞')}"
            send_telegram_message(summary, chat_id)
            send_telegram_message("üîç –í—ã–ø–æ–ª–Ω—è—é –∞–Ω–∞–ª–∏–∑...", chat_id)
            run_gpt_analysis(chat_id)

        elif text == "üîÅ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å" or text == "–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –∞–Ω–∞–ª–∏–∑—É:":
            show_symbol_menu(chat_id)

        else:
            keyboard = {
                "keyboard": [[{"text": "/start"}]],
                "resize_keyboard": True
            }
            send_telegram_message("–ü—Ä–∏–≤–µ—Ç! –Ø Hotei-bot-–ê–Ω–∞–ª–∏—Ç–∏–∫. –í—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ ‚Äî —è –æ—Ç–≤–µ—á–∞—é. –ñ–º–∏ –Ω–∞ /start", chat_id, reply_markup=keyboard)

    return 'OK', 200

# === Webhook –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ TradingView ===
@app.route('/webhook', methods=['POST'])
def tradingview_webhook():
    data = request.json

    message = data.get('message', 'üöÄ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Ç TradingView!')
    symbol = data.get("symbol", "EUR/USD")
    timeframe = data.get("timeframe", "M5")
    expiration = data.get("expiration", "5–º–∏–Ω")
    chat_id = int(os.environ.get("DEFAULT_CHAT_ID", "123456789"))

    prompt = f"""
    –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª: {message}
    –í–∞–ª—é—Ç–∞: {symbol}
    –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}
    –≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è: {expiration}
    –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "–¢—ã —Ç–æ—Ä–≥–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∏–∑ TradingView –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=500,
            temperature=0.7
        )
        reply = response['choices'][0]['message']['content']
        send_telegram_message(f"üìà –°–∏–≥–Ω–∞–ª –æ—Ç TradingView:\n<b>{message}</b>\n\nüìä GPT-–ê–Ω–∞–ª–∏–∑:\n{reply}", chat_id)
        return 'OK', 200
    except Exception as e:
        send_telegram_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞:\n{str(e)}", chat_id)
        return '–û—à–∏–±–∫–∞', 500

# === –°–ø–∏—Å–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ ===
SYMBOL_LIST = [
    "AUD/JPY", "AUD/CHF", "AUD/CAD", "AUD/USD",
    "GBP/CAD", "GBP/CHF", "GBP/AUD", "GBP/JPY", "GBP/USD",
    "EUR/USD", "EUR/GBP", "EUR/CAD", "EUR/AUD", "EUR/JPY", "EUR/CHF",
    "USD/JPY", "USD/CAD", "USD/CHF",
    "CAD/CHF", "CAD/JPY", "CHF/JPY"
]

SESSION_LIST = ["–ê–∑–∏–∞—Ç—Å–∫–∞—è", "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è", "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è"]

# === –ú–µ–Ω—é –∏ –∫–Ω–æ–ø–∫–∏ ===
def show_main_menu(chat_id):
    keyboard = {
        "keyboard": [
            [{"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"}],
            [{"text": "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑"}]
        ],
        "resize_keyboard": True
    }
    send_telegram_message("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", chat_id, reply_markup=keyboard)

def show_settings_menu(chat_id):
    keyboard = {
        "keyboard": [
            [{"text": "–í—ã–±–æ—Ä –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã"}],
            [{"text": "–í—ã–±–æ—Ä —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"}],
            [{"text": "–í—ã–±–æ—Ä —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏"}],
            [{"text": "–í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"}],
            [{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥"}]
        ],
        "resize_keyboard": True
    }

    send_telegram_message("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", chat_id, reply_markup=keyboard)

def show_symbol_menu(chat_id):
    buttons = [[{"text": s1}, {"text": s2}] for s1, s2 in zip(SYMBOL_LIST[::2], SYMBOL_LIST[1::2])]
    keyboard = {"keyboard": buttons + [[{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥"}]], "resize_keyboard": True}
    send_telegram_message("üí± –í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:", chat_id, reply_markup=keyboard)

def show_timeframe_menu(chat_id):
    keyboard = {
        "keyboard": [
            [{"text": "M1"}, {"text": "M5"}, {"text": "M15"}],
            [{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥"}]
        ],
        "resize_keyboard": True
    }
    send_telegram_message("üïê –í—ã–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º:", chat_id, reply_markup=keyboard)

def show_expiration_menu(chat_id):
    keyboard = {
        "keyboard": [
            [{"text": "3–º–∏–Ω"}, {"text": "5–º–∏–Ω"}, {"text": "7–º–∏–Ω"}],
            [{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥"}]
        ],
        "resize_keyboard": True
    }
    send_telegram_message("‚è≥ –£—Å—Ç–∞–Ω–æ–≤–∏ –≤—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏:", chat_id, reply_markup=keyboard)

def show_strategy_category_menu(chat_id):
    keyboard = {
        "keyboard": [[{"text": key}] for key in SHEET_GIDS.keys()] + [[{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥"}]],
        "resize_keyboard": True
    }
    send_telegram_message("üìò –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:", chat_id, reply_markup=keyboard)

def show_strategy_keyboard(chat_id):
    keyboard = {
        "keyboard": [[{"text": strategy}] for strategy in STRATEGIES.keys()] + [[{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥"}]],
        "resize_keyboard": True
    }
    send_telegram_message("üìó –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:", chat_id, reply_markup=keyboard)

def run_gpt_analysis(chat_id):
    state = user_state.get(chat_id, {})
    strategy_desc = STRATEGIES.get(state.get("strategy", ""), "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")

    prompt = f"""
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Ç—É–∞—Ü–∏—é:
    –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {state.get('strategy', '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞')}
    –¢–∞–π–º—Ñ—Ä–µ–π–º: {state.get('timeframe', '–Ω–µ –≤—ã–±—Ä–∞–Ω')}
    –≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è: {state.get('expiration', '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞')}
    –í–∞–ª—é—Ç–∞: {state.get('symbol', '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞')}

    –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:
    {strategy_desc}
    """

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "–¢—ã —Ç–æ—Ä–≥–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=500,
            temperature=0.7
        )
        reply = response['choices'][0]['message']['content']
        send_telegram_message(f"üìä GPT-–ê–Ω–∞–ª–∏–∑:\n{reply}", chat_id)
        send_telegram_message("üîÅ –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –∞–Ω–∞–ª–∏–∑—É:", chat_id)
    except Exception as e:
        send_telegram_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:\n{str(e)}", chat_id)

@app.route('/', methods=['GET'])
def index():
    return '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç', 200

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)
