from flask import Flask, request
import requests
import os
import openai
import json

app = Flask(__name__)

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
openai.api_key = os.environ.get("OPENAI_API_KEY")

# === –ü–∞–º—è—Ç—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
user_state = {}

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ JSON ===
def load_strategies():
    try:
        with open("strategies.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        return {"default": "—Ç—Ä–µ–Ω–¥ –ø–æ M30, –≤—Ö–æ–¥ –ø–æ M5, VRVP, MA, —É—Ä–æ–≤–Ω–∏ S/R, —Å–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã."}

STRATEGIES = load_strategies()

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –∫–Ω–æ–ø–∫–∞–º–∏ ===
def send_telegram_message(message, chat_id, reply_markup=None):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML"
    }
    if reply_markup:
        data["reply_markup"] = reply_markup
    requests.post(url, json=data)

# === Webhook Telegram ===
@app.route('/telegram', methods=['POST'])
def telegram_webhook():
    data = request.json

    if 'message' in data:
        chat_id = data['message']['chat']['id']
        text = data['message'].get('text', '')

        if text == "/start":
            user_state[chat_id] = {}
            send_telegram_message("–ü—Ä–∏–≤–µ—Ç! –Ø Hotei-bot-–ê–Ω–∞–ª–∏—Ç–∏–∫. –í—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ ‚Äî —è –æ—Ç–≤–µ—á–∞—é. –ñ–º–∏ –Ω–∞ /start", chat_id)
            show_symbol_keyboard(chat_id)

        elif text in SYMBOL_LIST:
            user_state.setdefault(chat_id, {})['symbol'] = text
            show_timeframe_keyboard(chat_id)

        elif text in ["M1", "M5", "M15"]:
            user_state.setdefault(chat_id, {})['timeframe'] = text
            show_expiration_keyboard(chat_id)

        elif text in ["3–º–∏–Ω", "5–º–∏–Ω", "7–º–∏–Ω"]:
            user_state.setdefault(chat_id, {})['expiration'] = text
            show_session_keyboard(chat_id)

        elif text in SESSION_LIST:
            user_state.setdefault(chat_id, {})['session'] = text
            show_strategy_keyboard(chat_id)

        elif text in list(STRATEGIES.keys()):
            user_state.setdefault(chat_id, {})['strategy'] = text
            send_telegram_message("üîç –í—ã–ø–æ–ª–Ω—è—é –∞–Ω–∞–ª–∏–∑...", chat_id)
            run_gpt_analysis(chat_id)

        elif text == "üîÅ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å" or text == "–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –∞–Ω–∞–ª–∏–∑—É:":
            user_state[chat_id] = {}
            show_symbol_keyboard(chat_id)

        else:
            keyboard = {
                "keyboard": [[{"text": "/start"}]],
                "resize_keyboard": True
            }
            send_telegram_message("–ü—Ä–∏–≤–µ—Ç! –Ø Hotei-bot-–ê–Ω–∞–ª–∏—Ç–∏–∫. –í—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ ‚Äî —è –æ—Ç–≤–µ—á–∞—é. –ñ–º–∏ –Ω–∞ /start", chat_id, reply_markup=keyboard)

    return 'OK', 200

# === –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä ===
SYMBOL_LIST = [
    "AUD/JPY", "AUD/CHF", "AUD/CAD", "AUD/USD",
    "GBP/CAD", "GBP/CHF", "GBP/AUD", "GBP/JPY", "GBP/USD",
    "EUR/USD", "EUR/GBP", "EUR/CAD", "EUR/AUD", "EUR/JPY", "EUR/CHF",
    "USD/JPY", "USD/CAD", "USD/CHF",
    "CAD/CHF", "CAD/JPY", "CHF/JPY"
]

# === –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π ===
SESSION_LIST = ["–ê–∑–∏–∞—Ç—Å–∫–∞—è", "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è", "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è"]

# === –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ ===
def show_symbol_keyboard(chat_id):
    keyboard_rows = []
    row = []
    for i, symbol in enumerate(SYMBOL_LIST, 1):
        row.append({"text": symbol})
        if i % 3 == 0:
            keyboard_rows.append(row)
            row = []
    if row:
        keyboard_rows.append(row)

    keyboard = {
        "keyboard": keyboard_rows,
        "resize_keyboard": True
    }
    send_telegram_message("–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:", chat_id, reply_markup=keyboard)

def show_timeframe_keyboard(chat_id):
    keyboard = {
        "keyboard": [[{"text": "M1"}, {"text": "M5"}, {"text": "M15"}]],
        "one_time_keyboard": True,
        "resize_keyboard": True
    }
    send_telegram_message("–í—ã–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º:", chat_id, reply_markup=keyboard)

def show_expiration_keyboard(chat_id):
    keyboard = {
        "keyboard": [[{"text": "3–º–∏–Ω"}, {"text": "5–º–∏–Ω"}, {"text": "7–º–∏–Ω"}]],
        "one_time_keyboard": True,
        "resize_keyboard": True
    }
    send_telegram_message("–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏:", chat_id, reply_markup=keyboard)

def show_session_keyboard(chat_id):
    keyboard = {
        "keyboard": [[{"text": s}] for s in SESSION_LIST],
        "resize_keyboard": True
    }
    send_telegram_message("–í—ã–±–µ—Ä–∏ —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Å—Å–∏—é:", chat_id, reply_markup=keyboard)

def show_strategy_keyboard(chat_id):
    strategy_buttons = [[{"text": name}] for name in STRATEGIES.keys()]
    keyboard = {
        "keyboard": strategy_buttons,
        "resize_keyboard": True
    }
    send_telegram_message("–í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∞–Ω–∞–ª–∏–∑–∞:", chat_id, reply_markup=keyboard)

# === –ó–∞–ø—É—Å–∫ GPT –∞–Ω–∞–ª–∏–∑–∞ ===
def run_gpt_analysis(chat_id):
    state = user_state.get(chat_id, {})
    symbol = state.get("symbol", "EUR/USD")
    timeframe = state.get("timeframe", "M5")
    expiration = state.get("expiration", "5–º–∏–Ω")
    session = state.get("session", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")
    strategy_key = state.get("strategy", "default")
    strategy_text = STRATEGIES.get(strategy_key, STRATEGIES["default"])

    prompt = f"""
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É {symbol}.
    –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}.
    –≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è –æ–ø—Ü–∏–æ–Ω–∞: {expiration}.
    –¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {session}.
    –†—ã–Ω–æ–∫ –æ—Ç–∫—Ä—ã—Ç.
    –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: {strategy_text}
    –í—ã–¥–∞–π —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ.
    """

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "–¢—ã —Ç–æ—Ä–≥–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=500,
            temperature=0.7
        )
        reply = response['choices'][0]['message']['content']
        keyboard = {
            "keyboard": [[{"text": "üîÅ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"}]],
            "resize_keyboard": True
        }
        send_telegram_message(f"üìä GPT-–ê–ù–ê–õ–ò–ó:\n{reply}", chat_id)
        send_telegram_message("–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –∞–Ω–∞–ª–∏–∑—É:", chat_id, reply_markup=keyboard)
    except Exception as e:
        send_telegram_message(f"‚ö†Ô∏è GPT-–æ—à–∏–±–∫–∞:\n{str(e)}", chat_id)
        show_symbol_keyboard(chat_id)

# === Render Index ===
@app.route('/', methods=['GET'])
def index():
    return '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç', 200

# === –°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)
